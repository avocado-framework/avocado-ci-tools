name: 'Avocado CI tools Collection'
description: 'Run avocado-framework specific actions for avocado projects on pull requests or issues to improve avocado-framework development.'
inputs:
  avocado-static-checks:
    description: |
      Runs avocado-static-checks on pull requests.
      Default is false.
    default: false
  avocado-project:
    description: |
      Mr. avocado configuration for manipulating with PR and issues.
      Default is false.
    default: false
  bot_app_id:
    description: |
      Bot app ID which is needed to generate access token for bot. It is required by avocado-project.
    default: ''
  bot_app_installation_id:
    description: |
      Bot app installation ID which is needed to generate access token for bot. It is required by avocado-project.
    default: ''
  bot_app_private_key:
    description: |
      Bot app private key which is needed to generate access token for bot. It is required by avocado-project.
    default: ''
runs:
  using: "composite"
  steps:
    # --- avocado-static-checks ---
    - if: ${{ inputs.avocado-static-checks == 'true' }}
      uses: actions/checkout@v2
      with:
        repository: avocado-framework/avocado-static-checks
        path: static-checks
    - if: ${{ inputs.avocado-static-checks  == 'true' }}
      run: |
        pip3 install -r static-checks/requirements.txt
        static-checks/run-static-checks
      shell: bash
    # --- avocado-project ---
    - if: ${{ inputs.avocado-project == 'true' }}
      name: Generate token
      id: generate_token
      uses: tibdex/github-app-token@021a2405c7f990db57f5eae5397423dcc554159c
      with:
        app_id: ${{ inputs.bot_app_id }}
        installation_id: ${{ inputs.bot_app_installation_id }}
        private_key: ${{ inputs.bot_app_private_key }}
    - if: ${{ inputs.avocado-project == 'true' }}
      name: Get project data
      env:
        GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        ORGANIZATION:  avocado-framework
        PROJECT_NUMBER: 1
      run: |
        gh api graphql -f query='
          query($org: String!, $number: Int!) {
            organization(login: $org){
              projectV2(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json
        echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
        echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
        if [[ ${{ github.event_name  }} == pull_request_target ]]; then
                echo 'EVENT_ID='${{  github.event.pull_request.node_id }} >> $GITHUB_ENV
                echo 'FIELD_VALUE='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Review Requested") |.id' project_data.json) >> $GITHUB_ENV
        else
                echo 'EVENT_ID='${{  github.event.issue.node_id }} >> $GITHUB_ENV
                echo 'FIELD_VALUE='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Triage") |.id' project_data.json) >> $GITHUB_ENV
        fi
      shell: bash
    - if: ${{ inputs.avocado-project == 'true' }}
      name: Add Item to project
      env:
        GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        item_id="$( gh api graphql -f query='
          mutation($project:ID!, $item:ID!) {
            addProjectV2ItemById(input: {projectId: $project, contentId: $item}) {
              item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f item=$EVENT_ID --jq '.data.addProjectV2ItemById.item.id')"
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV
      shell: bash
    - if: ${{ inputs.avocado-project == 'true' }}
      name: Set fields
      env:
        GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        gh api graphql -f query='
          mutation (
            $project: ID!
            $item: ID!
            $status_field: ID!
            $status_value: String!
          ) {
            set_status: updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $status_field
              value: {
                singleSelectOptionId: $status_value
                }
            }) {
              projectV2Item {
                id
                }
            }
          }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.FIELD_VALUE }} --silent
      shell: bash
